env KEY;

events {
    worker_connections  1024;
}

http {
    include mime.types;
    default_type  application/octet-stream;
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;
    sendfile    on;
    keepalive_timeout  65;

    lua_shared_dict jwt_secrets 10m;

    init_by_lua_block {
        local jwt = require "resty.jwt";
    }

    server {
        listen 80;

        location = /sign {
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local key = os.getenv("KEY")
                if key == nil then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("key == nil")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local jwt_token = jwt:sign(
                    key,
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={foo="bar"}
                    }
                )
                ngx.say(jwt_token)
            }
        }

        location / {
            access_by_lua_block {
                local auth_header = ngx.var.http_Authorization

                if auth_header == nil then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("Missing Authorization header")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
                if token == nil then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("Invalid Authorization header")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local jwt = require "resty.jwt"
                local key = os.getenv("KEY")
                local jwt_obj = jwt:verify(key, token)

                if not jwt_obj.verified then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("token: ", token)
                    ngx.say("key: ", key)
                    ngx.say("Invalid token: ", jwt_obj.reason)
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.ctx.user = jwt_obj.payload.user
            }
            root /usr/local/openresty/nginx/html;
            index index.html;
        }
    }
}
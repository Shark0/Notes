env KEY;
load_module "modules/ngx_http_image_filter_module.so";
worker_processes auto;

events {
	worker_connections 1024;
	use epoll;
}

http {

    lua_shared_dict jwt_secrets 10m;
    init_by_lua_block {
        local jwt = require "resty.jwt";
    }

	server {
		location = /sign {
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local key = os.getenv("KEY")
                if key == nil then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("key == nil")
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                local jwt_token = jwt:sign(
                    key,
                    {
                        header={typ="JWT", alg="HS256"},
                        payload={file="person.png"}
                    }
                )
                ngx.say(jwt_token)
            }
        }

        location ~ ^/file/(?<encode_path>.+)$ {
            set $file '';
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local key = os.getenv("KEY")
                local jwt_obj = jwt:verify(key, ngx.var.encode_path)
                if not jwt_obj.verified then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.say("$encode_path: ", ngx.var.encode_path)
                    ngx.say("key: ", key)
                    ngx.say("Invalid token: ", jwt_obj.reason)
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                ngx.var.file = jwt_obj.payload.file;
            }
            alias /usr/local/openresty/nginx/html/$file;
        }
	}
}
